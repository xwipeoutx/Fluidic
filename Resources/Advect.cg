#include "Utils.cg"


/**
 * 2 step advection
 * Advects the 'data' texture by the velocity given over the timestep given.
 * This is a higher accuracy version, which uses the error in the step back as an estimator of the
 * error in advection
 *
 * @param coords coordinates of the current pixel
 * @param data the data texture - will be advected
 * @param velocity the velocity texture - will be the direction of advection
 * @param boundary texture containing the fluid boundaries (currently ignored)
 * @param d (dx, dy, 0, dt)
 * @return the new data for this coordiate
 */
float4 Advect2D (
			float2 coords : TEXCOORD0,
			uniform samplerRECT data,
			uniform samplerRECT velocity,
			uniform samplerRECT boundary,
			uniform float2 scale,
			uniform float4 d) : COLOR
{
	half4 returnVal;
	half2 currVel;
	half2 stepBackCoords, stepForwardCoords;
	half2 alpha = d.w/d.xy;
	
	//do a texture lookup to get the velocity
	currVel = (texRECT(velocity, coords*scale)).xy;
	
	//step back a timestep to get the previous velocity
	stepBackCoords = coords*scale - alpha * currVel;

	//if it's a boundary, return base value
	float bnd = texRECT(boundary, stepBackCoords);
	
	if (bnd > 0) {
		returnVal = texRECT(data, coords);
	} else {
		//interpolate the step back position and return
		float4 nextVel = F4Bilerp(velocity, stepBackCoords/scale);
		stepForwardCoords = stepBackCoords + alpha * nextVel.xy;
		stepBackCoords = stepBackCoords + (stepBackCoords - stepForwardCoords) / 2;
		returnVal = F4Bilerp(data, stepBackCoords/scale);
	}
	//returnVal = texRECT(data, stepBackCoords);
	return returnVal;
}

/**
 * Simple advection
 * Advects the 'data' texture by the velocity given over the timestep given.
 * WARNING: Not working satisfactorily
 *
 * @param coords coordinates of the current pixel
 * @param data the data texture - will be advected
 * @param velocity the velocity texture - will be the direction of advection
 * @param boundary texture containing the fluid boundaries
 * @param scale the scale between the velocity resolution and the data resolution
 * @param d (dx, dy, 0, dt)
 * @return the new data for this coordiate
 */
half4 SimpleAdvect2D (
			float2 coords : TEXCOORD0,
			uniform samplerRECT data,
			uniform samplerRECT velocity,
			uniform samplerRECT boundary,
			uniform float2 scale,
			uniform float4 d) : COLOR
{
	half4 returnVal;
	half2 currVel;
	half2 stepBackCoords;
	half2 alpha = d.w/d.xy;
	
	//do a texture lookup to get the velocity
	currVel = (texRECT(velocity, coords*scale)).xy;
	
	//step back a timestep to get the previous velocity
	stepBackCoords = coords*scale - alpha * currVel;

	//if it's a boundary, return base value
	float bnd = texRECT(boundary, stepBackCoords);
	
	if (bnd > 0) {
		returnVal = texRECT(data, coords);
	} else {
		//interpolate the step back position and return
		returnVal = F4Bilerp(data, stepBackCoords/scale);
	}
	//returnVal = texRECT(data, stepBackCoords);
	return returnVal;
}

/**
 * \brief Advects data by velocity (more accurate version)
 * 
 * Advection is the component of navier-stokes equations that
 * transports the field along the vector-field direction.
 *
 * Advection looks at the velocity speed at each voxel, and 
 * performs a backwards time step to find out which position
 * will be here in the next time step. It then uses interpolation
 * to update the value at the current time step. 
 *
 * @param coords The texture coordinates
 * @param data The data to advect
 * @param velocity The velocity field to advect by
 * @param d dx, dy, dz and dt - spatial and time differences
 * @param res the resolution
 * @param slabs The number of slabs in each dimension
 */
float4 Advect3D (
			float2 coords : TEXCOORD0,
			uniform samplerRECT data,
			uniform samplerRECT velocity,
			uniform samplerRECT boundary,
			uniform float4 d,
			uniform float3 res,
			uniform int2 slabs) : COLOR
{
	float4 returnVal;
	float3 currVel;
	float3 coords3d;
	float3 stepBackCoords3d, stepForwardCoords3d;
	float2 stepBackCoords2d;
	float3 alpha = d.w/float3(d.x, d.y, d.z);

	//do a texture lookup to get the velocity
	currVel = (texRECT(velocity, coords)).xyz;

	coords3d = Tex2D3D(coords, res, slabs);
	
	//step back a timestep to get the previous velocity
	stepBackCoords3d = coords3d - alpha * currVel;

	//if it's a boundary, return base value
	stepBackCoords2d = Tex3D2D(stepBackCoords3d, res, slabs);
	float bnd = texRECT(boundary, stepBackCoords2d);
	if (bnd > 0) {
		returnVal = texRECT(data, coords);
	} else {
		//interpolate the step back position and return
		float4 nextVel = F4Trilerp(velocity, stepBackCoords3d, res, slabs);
		stepForwardCoords3d = stepBackCoords3d + alpha * nextVel.xyz;
		stepBackCoords3d = stepBackCoords3d + (stepBackCoords3d - stepForwardCoords3d) / 2;

		stepBackCoords3d = clamp(stepBackCoords3d, float3(0.5,0.5,0.5), res-float3(0.5,0.5,0.5));
		returnVal = F4Trilerp(data, stepBackCoords3d, res, slabs);
	}

	return returnVal;
}

/**
 * \brief Advects data by velocity (simple version)
 * 
 * Advection is the component of navier-stokes equations that
 * transports the field along the vector-field direction.
 *
 * Advection looks at the velocity speed at each voxel, and 
 * performs a backwards time step to find out which position
 * will be here in the next time step. It then uses interpolation
 * to update the value at the current time step. 
 *
 * @param coords The texture coordinates
 * @param data The data to advect
 * @param velocity The velocity field to advect by
 * @param d dx, dy, dz and dt - spatial and time differences
 * @param res the resolution
 * @param slabs The number of slabs in each dimension
 */
float4 SimpleAdvect3D (
			float2 coords : TEXCOORD0,
			uniform samplerRECT data,
			uniform samplerRECT velocity,
			uniform samplerRECT boundary,
			uniform float4 d,
			uniform float3 res,
			uniform int2 slabs) : COLOR
{
	float4 returnVal;
	float3 currVel;
	float3 coords3d;
	float3 stepBackCoords3d;
	float2 stepBackCoords2d;
	float3 alpha = d.w/float3(d.x, d.y, d.z);

	//do a texture lookup to get the velocity
	currVel = (texRECT(velocity, coords)).xyz;

	coords3d = Tex2D3D(coords, res, slabs);
	
	//step back a timestep to get the previous velocity
	stepBackCoords3d = coords3d - alpha * currVel;

	//if it's a boundary, return base value
	stepBackCoords2d = Tex3D2D(stepBackCoords3d, res, slabs);
	float bnd = texRECT(boundary, stepBackCoords2d);
	if (bnd > 0) {
		returnVal = texRECT(data, coords);
	} else {
		stepBackCoords3d = clamp(stepBackCoords3d, float3(0.5,0.5,0.5), res-float3(0.5,0.5,0.5));
		returnVal = F4Trilerp(data, stepBackCoords3d, res, slabs);
	}

	return returnVal;
}